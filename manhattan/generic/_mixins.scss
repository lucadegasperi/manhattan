/*------------------------------------*\
    $MIXINS
\*------------------------------------*/

/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
   `@include font-size(10px);`
 */

@mixin font-size($font-size, $line-height: 1.5em) {
    font-size: $font-size;
    font-size: ($font-size / $base-font-size) * 1rem;
    line-height: $line-height;
}


/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `@include vendor(border-radius, 4px);`
 *
 */
@mixin vendor($property, $value...) {
    -webkit-#{$property}: $value;
       -moz-#{$property}: $value;
        -ms-#{$property}: $value;
         -o-#{$property}: $value;
            #{$property}: $value;
}

/**
 * Create muted + unmuted classes in one go
 *
   `@include vendor(classname);`
 *
 */
@mixin class($classname) {
    @if($development == true) {
        .#{$classname}, %#{$classname} {
            @content;
        }
    }
    @if($development == false) {
        %#{$classname} {
            @content;
        }
    }
}


/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 *
   .foo{
       @include vendor(animation, shrink 3s);
   }

   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 *
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
 */
@mixin keyframe ($animation-name) {
    @-webkit-keyframes $animation-name {
        @content;
    }

    @-moz-keyframes $animation-name {
        @content;
    }

    @-ms-keyframes $animation-name {
        @content;
    }

    @-o-keyframes $animation-name {
        @content;
    }

    @keyframes $animation-name {
        @content;
    }
}


/**
 * Force overly long spans of text to truncate, e.g.:
 *
   `@include truncate(100%);`
 *
 * Where `$truncation-boundary` is a united measurement.
 */
@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 *
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * xs
 * s
 * m
 * l
 * xl
 *
 * Not using a media query will, naturally, serve styles to all devices.
 *
 * `@include media-query(xs){ [styles here] }`
 *
 * We work out your end points for you:
 */

@mixin media-query($pixels) {
    @media only screen and (min-width: ( $pixels / $base-font-size ) * 1em ) { @content; }
}

/**
 * Find a matching item in a key => value list and returns it
 *
 */
@function value-for-key($list, $key) {
    @each $item in $list {
        @if (nth($item, 1) == $key) {
            @return nth($item, 2);
        }
    }
}

@mixin breakpoint($name){
    $pixels: value-for-key($breakpoints, $name);
    @include media-query($pixels){
        @content;
    }
}